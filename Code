// Lightning.io - Multiplayer Game
// Enhanced Version: Improved performance, more dynamic obstacles, and smoother player interactions.

const { Server } = require("socket.io");
const express = require("express");
const http = require("http");
const path = require("path");

const app = express();
const server = http.createServer(app);
const io = new Server(server);

app.use(express.static(path.join(__dirname, "public")));

// Ensure root URL serves index.html
app.get("/", (req, res) => {
    res.sendFile(path.join(__dirname, "public", "index.html"));
});

let players = {}; 
let electricityDots = []; 
let obstacles = []; 

const MAP_SIZE = 3000;
const ELECTRICITY_COUNT = 150;
const OBSTACLE_COUNT = 30;
const BASE_SPEED = 5;

function getRandomPosition() {
    return {
        x: Math.random() * MAP_SIZE,
        y: Math.random() * MAP_SIZE
    };
}

function spawnElectricity() {
    while (electricityDots.length < ELECTRICITY_COUNT) {
        electricityDots.push({
            id: Math.random().toString(36).substr(2, 9),
            ...getRandomPosition(),
            value: Math.random() * 15 + 5
        });
    }
}

function spawnObstacles() {
    for (let i = 0; i < OBSTACLE_COUNT; i++) {
        obstacles.push({
            ...getRandomPosition(),
            size: Math.random() * 60 + 30
        });
    }
}

spawnElectricity();
spawnObstacles();

io.on("connection", (socket) => {
    console.log("Player connected: ", socket.id);
    
    players[socket.id] = {
        id: socket.id,
        ...getRandomPosition(),
        size: 25,
        speed: BASE_SPEED,
    };
    
    socket.emit("init", { players, electricityDots, obstacles });

    socket.on("move", (data) => {
        if (players[socket.id]) {
            let player = players[socket.id];
            player.x = Math.max(0, Math.min(MAP_SIZE, player.x + data.dx * player.speed));
            player.y = Math.max(0, Math.min(MAP_SIZE, player.y + data.dy * player.speed));
            checkCollisions(socket.id);
        }
    });

    socket.on("disconnect", () => {
        console.log("Player disconnected: ", socket.id);
        delete players[socket.id];
    });
});

function checkCollisions(playerId) {
    let player = players[playerId];
    if (!player) return;
    
    electricityDots = electricityDots.filter(dot => {
        if (Math.hypot(player.x - dot.x, player.y - dot.y) < player.size) {
            player.size += dot.value * 0.6;
            return false;
        }
        return true;
    });
    spawnElectricity();
    
    for (let id in players) {
        if (id !== playerId) {
            let other = players[id];
            if (Math.hypot(player.x - other.x, player.y - other.y) < player.size && player.size > other.size + 5) {
                player.size += other.size * 0.7;
                delete players[id];
                io.to(id).emit("eliminated");
            }
        }
    }
    
    obstacles.forEach(obstacle => {
        if (Math.hypot(player.x - obstacle.x, player.y - obstacle.y) < obstacle.size + player.size / 2) {
            player.size = Math.max(20, player.size * 0.9);
        }
    });
}

setInterval(() => {
    io.emit("update", { players, electricityDots, obstacles });
}, 50);

server.listen(3000, () => {
    console.log("Lightning.io server running on port 3000");
});
